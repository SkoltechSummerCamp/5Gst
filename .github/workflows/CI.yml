name: "Grouped CI of balancer, service and applications"

on: 
  push:
  pull_request:
    
jobs:

  balacner-generate-swagger:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: test
      DB_NAME: test
      DB_USER: test
      DB_PASSWORD: test
      DB_HOST: test
      DB_PORT: test
    defaults:
      run:
        working-directory: ./balancer

    steps:
      - uses: actions/checkout@v3

      - name: Install pip, pipenv and packages from Pipfile
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install
      - name: Generate swagger schema
        run: |
          pipenv run python manage.py generate_swagger swagger.yaml
      - name: Upload swagger schema to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: swagger-schema
          path: balancer/swagger.yaml
          
  balancer-generate-code:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: balacner-generate-swagger
    container: swaggerapi/swagger-codegen-cli:2.4.27
    defaults:
      run:
        working-directory: ./balancer

    steps:
      - uses: actions/checkout@v3

      - name: Download swagger schema
        uses: actions/download-artifact@v2
        with:
          name: swagger-schema
          path: balancer

      - name: Clear AUTOBUILD directory
        run: rm -rf ../AUTOBUILD

      - name: Generate client for service
        run: >
          java
          -jar
          /opt/swagger-codegen-cli/swagger-codegen-cli.jar
          generate
          -i swagger.yaml
          -l python
          -o ../AUTOBUILD/service2BalancerClient/
          -c ../service/.swagger-codegen-config/balancerApi.json
      - name: Generate client for application
        run: >
          java
          -jar
          /opt/swagger-codegen-cli/swagger-codegen-cli.jar
          generate
          -i swagger.yaml
          -l java
          -o ../AUTOBUILD/application2BalancerClient/
          -c ../application/.swagger-codegen-config/balancerApi.json
      # Swagger codegen container has invalid git installed,
      # so we need another container to push changes
      - name: Upload generated code to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: AUTOBUILD
          path: AUTOBUILD
          
  balancer-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: balancer-generate-code
    defaults:
      run:
        working-directory: ./balancer

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{secrets.PERSONAL_ACCESS_TOKEN_GITHUB }}

      - name: Clear previously generated code
        run: |
          rm -rf ../AUTOBUILD
          rm -rf ../application/balancerApi
          rm -rf ../service/swagger_client
      - name: Download generated code
        uses: actions/download-artifact@v2
        with:
          name: AUTOBUILD
          path: AUTOBUILD

      - name: Move generated code to projects
        run: |
          cp -r ../AUTOBUILD/application2BalancerClient/ ../application/balancerApi
          cp -r ../AUTOBUILD/service2BalancerClient/swagger_client/ ../service/swagger_client
          cd ../application
          git apply ./.swagger-codegen-config/balancerApi.patch
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
            commit_message: 'Generate code using swagger-codegen'
            file_pattern: application/balancerApi service/swagger_client
            
  balancer-makemigartions:
    if: github.event_name == 'push'
    needs: balancer-push
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: test
      DB_NAME: test
      DB_USER: test
      DB_PASSWORD: test
      DB_HOST: test
      DB_PORT: test
    defaults:
      run:
        working-directory: ./balancer
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{secrets.PERSONAL_ACCESS_TOKEN_GITHUB }}
    - name: make migrations
      run: |
       python -m pip install --upgrade pip
       pip install pipenv
       pipenv install
       pipenv run python manage.py makemigrations
       
    - name: push changes to git
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "generated migration scripts"
        file_pattern: balancer/services/migrations 
        
  balancer-test:
    needs: balancer-makemigartions
    if: |
      (github.event_name == 'push' && needs.balancer-makemigartions.result == 'success') ||
      (github.event_name == 'pull_request' && needs.balancer-makemigartions.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: test
      TEST_MODE: "True"
    defaults:
      run:
        working-directory: ./balancer
    steps:
    - uses: actions/checkout@main
    - name: Install pip, pipenv and packages from Pipfile
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
    - name: Run tests
      run: |
        pipenv run test

  balancer-build-image:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: balancer-test
    defaults:
      run:
        working-directory: ./balancer
    steps:
      - uses: actions/checkout@v2

      - name: build docker image
        run: docker build . --tag new_balancer_image


  balancer-publish-to-dockerhub:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: balancer-test
    defaults:
      run:
        working-directory: ./balancer

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup version variable
        run: echo "version=$(cat VERSION)" > $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./balancer
          push: true
          tags: skoltech/speedtest-balancer:${{ env.version }}.${{ github.run_number }} #skoltech/speedtest-balancer:latest
          
          
          
          
          
          
          
          
          
          
  application-debug-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Android NDK
        run: yes | "$ANDROID_HOME/tools/bin/sdkmanager" "ndk;19.2.5345600"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create file with artifactName variable
        run: |
          REF=$(echo "-${GITHUB_REF#refs/heads/}" | sed 's/\//-/g')
          if [ ${#REF} -eq 1 ]; then REF=""; fi
          ./gradlew :app:writeVersion
          ARTIFACT_NAME="speedtest-$(cat VERSION)-$GITHUB_RUN_NUMBER$REF"
          mkdir -p ../.github/variables
          echo "{\"variables\": [{\"name\": \"artifactName\", \"value\": \"$ARTIFACT_NAME\" }]}" > ../.github/variables/variables.json
      - name: Set artifactName variable
        uses: deep-mm/set-variables@v1.0
        with:
          variableFileName: 'variables'

      - name: Build with Gradle
        run: ./gradlew :app:assembleDebug

      - name: Rename apk
        run: |
          mkdir gh-artifacts-debug-build
          mv app/build/outputs/apk/debug/app-debug.apk gh-artifacts-debug-build/${{ env.artifactName }}-debug.apk
      - name: Upload apk to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifactName }}-debug
          path: application/gh-artifacts-debug-build/*
          
  application-release-build:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    defaults:
      run:
        working-directory: ./application

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Android NDK
        run: yes | "$ANDROID_HOME/tools/bin/sdkmanager" "ndk;19.2.5345600"

      - name: Patch balancer API
        run: |
          cd balancerApi
          git apply ../balancerApi.patch
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create file with artifactName variable
        run: |
          REF=$(echo "-${GITHUB_REF#refs/heads/}" | sed 's/\//-/g')
          if [ ${#REF} -eq 1 ]; then REF=""; fi
          ./gradlew :app:writeVersion
          ARTIFACT_NAME="speedtest-$(cat VERSION)-$GITHUB_RUN_NUMBER$REF"
          mkdir -p ../.github/variables
          echo "{\"variables\": [{\"name\": \"artifactName\", \"value\": \"$ARTIFACT_NAME\" }]}" > ../.github/variables/variables.json
      - name: Set artifactName variable
        uses: deep-mm/set-variables@v1.0
        with:
          variableFileName: 'variables'

      - name: Get signing key
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.RELEASE_KEYSTORE_GIT_REPOSITORY }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_GITHUB }}
          path: application/release-keystore

      - name: Move signing key
        run: mv release-keystore/release.keystore keystores

      - name: Build with Gradle
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_SIGN_KEY_ALIAS: ${{ secrets.RELEASE_SIGN_KEY_ALIAS }}
          RELEASE_SIGN_KEY_PASSWORD: ${{ secrets.RELEASE_SIGN_KEY_PASSWORD }}
        run: |
          ./gradlew :app:assembleRelease
          ./gradlew :app:bundleRelease
      - name: Rename artifacts
        run: |
          mkdir gh-artifacts-release-build
          mv app/build/outputs/apk/release/app-release.apk gh-artifacts-release-build/${{ env.artifactName }}-release.apk
          mv app/build/outputs/bundle/release/app-release.aab gh-artifacts-release-build/${{ env.artifactName }}-release.aab
      - name: Upload apk to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifactName }}-release
          path: application/gh-artifacts-release-build/*
          
          
          
          
          
          
          
          
          
          

  service-generate-swagger:
    runs-on: ubuntu-latest  
    if: github.event_name == 'push'
    env:
      SERVICE_IP_ADDRESS: localhost
      BALANCER_ADDRESS: localhost:5555
      IPERF_PORT: 5001
      SERVICE_PORT: 5000
      SECRET_KEY: test
    defaults:
      run:
        working-directory: ./service

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # TODO fix service so it can generate swagger schema without iperf built
      - name: Iperf compilation
        run: ./scripts/build-iperf.sh

      - name: Install pip, pipenv and packages from Pipfile
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install
      - name: Generate swagger schema
        run: |
          pipenv run python manage.py generate_swagger swagger.yaml
      - name: Upload swagger schema to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: swagger-schema
          path: service/swagger.yaml
          
  service-generate-code:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: service-generate-swagger
    container: swaggerapi/swagger-codegen-cli:2.4.27
    defaults:
      run:
        working-directory: ./service

    steps:
      - uses: actions/checkout@v3

      - name: Download swagger schema
        uses: actions/download-artifact@v2
        with:
          name: swagger-schema
          path: service

      - name: Clear AUTOBUILD directory
        run: rm -rf ../AUTOBUILD

      - name: Generate client for service
        run: >
          java
          -jar
          /opt/swagger-codegen-cli/swagger-codegen-cli.jar
          generate
          -i swagger.yaml
          -l python
          -o ../AUTOBUILD/balancer2ServiceClient/
          -c ../balancer/.swagger-codegen-config/serviceApi.json
      - name: Generate client for application
        run: >
          java
          -jar
          /opt/swagger-codegen-cli/swagger-codegen-cli.jar
          generate
          -i swagger.yaml
          -l java
          -o ../AUTOBUILD/application2ServiceClient/
          -c ../application/.swagger-codegen-config/serviceApi.json
      # Swagger codegen container has invalid git installed,
      # so we need another container to push changes
      - name: Upload generated code to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: AUTOBUILD
          path: AUTOBUILD
          
  service-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: service-generate-code
    defaults:
      run:
        working-directory: ./service

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{secrets.PERSONAL_ACCESS_TOKEN_GITHUB }}

      - name: Clear previously generated code
        run: |
          rm -rf ../AUTOBUILD
          rm -rf ../application/serviceApi
          rm -rf ../balancer/service_api
      - name: Download generated code
        uses: actions/download-artifact@v2
        with:
          name: AUTOBUILD
          path: AUTOBUILD

      - name: Move generated code to projects
        run: |
          cp -r ../AUTOBUILD/application2ServiceClient/ ../application/serviceApi
          cp -r ../AUTOBUILD/balancer2ServiceClient/service_api/ ../balancer/service_api
          cd ../application
          git apply ./.swagger-codegen-config/serviceApi.patch
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
            commit_message: 'Generate service client using swagger-codegen'
            file_pattern: application/serviceApi balancer/service_api
            
  service-build-iperf-pr:  
    if: github.event_name == 'pull_request' && needs.service-push.result == 'skipped'
    needs: service-push
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./service

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Compilation
        run: ./scripts/build-iperf.sh

      - name: Setup artifact content
        run: |
          mkdir gh-artifacts
          mv iperf.elf gh-artifacts/
          
          IPERF_VERSION=$(cat ../iPerf/VERSION)
          echo "artifactName=iperf-$IPERF_VERSION.$GITHUB_RUN_NUMBER" > $GITHUB_ENV
      
      - name: Upload iperf binary to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifactName }}
          path: service/gh-artifacts/*
          
  service-speedtest-service-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: service-build-iperf-pr
    defaults:
      run:
        working-directory: ./service

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup artifact name in env
        run: |
          IPERF_VERSION=$(cat ../iPerf/VERSION)
          echo "iPerfArtifactName=iperf-$IPERF_VERSION.$GITHUB_RUN_NUMBER" > $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.iPerfArtifactName }}
          path: service
      
      - name: Setup artifact content
        run: |
          cd ..
          mkdir gh-artifacts/
          cp -r service/* gh-artifacts/
          
          echo "artifactName=speedtest-service-$(cat service/VERSION).$GITHUB_RUN_NUMBER" > $GITHUB_ENV
      
      - name: Upload all server files to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifactName }}
          path: gh-artifacts/*
          
  service-build-image-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: service-speedtest-service-pr
    defaults:
      run:
        working-directory: ./service
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Setup version variable      
        run: echo "version=$(cat VERSION)" > $GITHUB_ENV
    
      - uses: actions/download-artifact@v2
        with:
          name: speedtest-service-${{ env.version }}.${{ github.run_number }}
          path: service/gh-artifacts
      - name: build docker image
        run: |
          docker build . --tag new_service_image
          
  service-build-iperf-push:
    if: github.event_name == 'push'
    needs: service-push
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./service

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Compilation
        run: ./scripts/build-iperf.sh

      - name: Setup artifact content
        run: |
          mkdir gh-artifacts
          mv iperf.elf gh-artifacts/
          
          IPERF_VERSION=$(cat ../iPerf/VERSION)
          echo "artifactName=iperf-$IPERF_VERSION.$GITHUB_RUN_NUMBER" > $GITHUB_ENV
      
      - name: Upload iperf binary to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifactName }}
          path: service/gh-artifacts/*
          
  service-speedtest-service-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: service-build-iperf-push
    defaults:
      run:
        working-directory: ./service

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup artifact name in env
        run: |
          IPERF_VERSION=$(cat ../iPerf/VERSION)
          echo "iPerfArtifactName=iperf-$IPERF_VERSION.$GITHUB_RUN_NUMBER" > $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.iPerfArtifactName }}
          path: service
      
      - name: Setup artifact content
        run: |
          cd ..
          mkdir gh-artifacts/
          cp -r service/* gh-artifacts/
          
          echo "artifactName=speedtest-service-$(cat service/VERSION).$GITHUB_RUN_NUMBER" > $GITHUB_ENV
      
      - name: Upload all server files to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifactName }}
          path: gh-artifacts/*
          
  service-publish-to-dockerhub-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: service-speedtest-service-push
    defaults:
      run:
        working-directory: ./service
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup version variable
        run: echo "version=$(cat VERSION)" > $GITHUB_ENV
    
      - uses: actions/download-artifact@v2
        with:
          name: speedtest-service-${{ env.version }}.${{ github.run_number }}
          path: service/gh-artifacts

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: service/gh-artifacts
          push: true
          tags: skoltech/speedtest-service:${{ env.version }}.${{ github.run_number }}

